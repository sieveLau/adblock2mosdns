#include <cstdint>
#include <exception>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <ostream>
#include <string>
#include <unordered_set>
#include <vector>

#include "downloader.hpp"
#include "nlohmann/json.hpp"

using std::cout;
using std::endl;
using std::ofstream;
using std::ostringstream;
using json = nlohmann::json;

int main(int argc, char** argv) {
    const static uint32_t SNITCH_MAX = 200000;
    std::filesystem::path myself(argv[0]);
    std::filesystem::path parent = myself.parent_path();
    std::filesystem::path path_link_file = parent / "links.txt";
    std::filesystem::path path_keys_file = parent / "keys_to_remove.txt";
    if (!std::filesystem::exists(path_link_file)) {
        std::cerr << "links.txt not found!" << endl;
        std::cerr << "Please create one at " << path_link_file << endl;
        exit(2);
    }
    if (!std::filesystem::exists(path_keys_file)) {
        std::cerr << "keys_to_remove.txt not found!" << endl;
        std::cerr << "Please create one at " << path_keys_file << endl;
        exit(2);
    }

    json result;
    result["name"] = "A Little Snitch Rule Group";
    result["description"] = "Little Snitch rule group generated by surge2littlesnitch.";
    result["denied-remote-domains"] = {};
    result["denied-remote-hosts"] = {};
    result["denied-remote-addresses"] = {};

    std::unordered_set<std::string> set;
    std::unordered_set<std::string> keys_to_remove;

    auto str = download(path_link_file);

    std::ifstream in(path_keys_file);
    if (in.is_open()) {
        std::string a_key;
        while (std::getline(in, a_key)) {
            keys_to_remove.insert(a_key);
        }
        in.close();
    }

    add_host_to_set(str, set);
    for (const auto& key : keys_to_remove) {
        set.erase(key);
    }

    uint32_t rule_count = 0;
    for (const auto& i : set) {
        if (++rule_count > SNITCH_MAX) {
            std::cerr << "Warning, too many rules, one little snitch rule group can only contain " << SNITCH_MAX
                      << "rules at max. I will skip remaining rules to ensure the result able to be imported." << endl;
            break;
        }
        result["denied-remote-hosts"].emplace_back(i);
    }

    cout << result.dump(2, ' ') << endl;
    std::clog << "number of rules: " << result["denied-remote-hosts"].size() << endl;
    return 0;
}