#include <exception>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <ostream>
#include <regex>
#include <string>
#include <unordered_set>
#include <vector>

#include "curl_easy.h"
#include "curl_exception.h"
#include "curl_form.h"
#include "curl_ios.h"
#include "nlohmann/json.hpp"

using std::cout;
using std::endl;
using std::ofstream;
using std::ostringstream;

using curl::curl_easy;
using curl::curl_easy_exception;
using curl::curl_ios;
using json = nlohmann::json;

template <class T>
void add_host_to_set(const std::string& src, std::unordered_set<T>& dest) {
    std::istringstream in(src);
    std::string line;
    const std::regex reg_hosts("\\S* (\\S*)");
    std::cmatch match;
    while ((std::getline(in, line))) {
        auto line_cstr = line.c_str();
        if (std::regex_match(line_cstr, match, reg_hosts)) {
            dest.insert(match[1]);
        }
    }
}

int main(int argc, char** argv) {
    std::filesystem::path myself(argv[0]);
    std::filesystem::path parent = myself.parent_path();
    std::filesystem::path path_link_file = parent / "links.txt";
    std::filesystem::path path_keys_file = parent / "keys_to_remove.txt";
    if (!std::filesystem::exists(path_link_file)) {
        std::cerr << "links.txt not found!" << endl;
        std::cerr << "Please create one at " << path_link_file << endl;
        exit(2);
    }
    if (!std::filesystem::exists(path_keys_file)) {
        std::cerr << "keys_to_remove.txt not found!" << endl;
        std::cerr << "Please create one at " << path_keys_file << endl;
        exit(2);
    }

    json result;
    result["name"] = "A Little Snitch Rule Group";
    result["description"] = "Little Snitch rule group generated by surge2littlesnitch.";
    result["denied-remote-domains"] = {};
    result["denied-remote-hosts"] = {};
    result["denied-remote-addresses"] = {};

    std::unordered_set<std::string> set;
    std::unordered_set<std::string> keys_to_remove;

    ostringstream str;
    curl_ios<ostringstream> writer(str);

    std::ifstream in(path_link_file);
    if (in.is_open()) {
        std::string a_url;
        while (std::getline(in, a_url)) {
            curl_easy easy(writer);
            easy.add<CURLOPT_URL>(a_url.c_str());
            easy.add<CURLOPT_FOLLOWLOCATION>(1L);
            try {
                easy.perform();
            } catch (curl_easy_exception& exception) {
                std::cerr << exception.what() << endl;
                exception.print_traceback();
            }
            easy.reset();
        }
        in.close();
    }

    in.open(path_keys_file);
    if (in.is_open()) {
        std::string a_key;
        while (std::getline(in, a_key)) {
            keys_to_remove.insert(a_key);
        }
        in.close();
    }

    add_host_to_set(str.str(), set);
    for (const auto& key : keys_to_remove) {
        set.erase(key);
    }

    for (const auto& i : set) {
        result["denied-remote-hosts"].emplace_back(i);
    }

    cout << result.dump(2, ' ') << endl;
    std::clog << "number of rules: " << result["denied-remote-hosts"].size() << endl;
    return 0;
}